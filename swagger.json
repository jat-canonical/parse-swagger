{
  "swagger": "2.0",
  "info": {
    "description": "The Anbox Management Service (AMS) external REST API is the REST API used by\nall AMS clients. Note that internal endpoints are not included in this\ndocumentation.\n\nThe AMS API is available over both a local unix+http and a remote https API.\nAuthentication for local users relies on group membership and access to the\nunix socket. For remote users, the default authentication method is TLS client\ncertificates.",
    "title": "AMS external REST API",
    "version": "1.0"
  },
  "paths": {
    "/1.0/": {
      "get": {
        "description": "This endpoint returns the service status and its supported API extensions.\nIt also returns whether the connection is trusted or not.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "service"
        ],
        "summary": "Get the status and features supported by the service",
        "operationId": "service_get",
        "responses": {
          "200": {
            "description": "Current config for the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/ServiceStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/addons": {
      "get": {
        "description": "This endpoint returns a list of addons in AMS.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "addons"
        ],
        "summary": "Get a list of addons",
        "operationId": "addons_get",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/addons/foo\",\n  \"/1.0/addons/bar\"\n]"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "This enpoint creates a new addon by uploading a package with the addon\nmanifest and hooks. The package format must be bzip2 or zip archive.\n\nRequired Extensions:\n`zip_archive_support`: To use the zip format, the server must have the extension.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "addons"
        ],
        "summary": "Create a new addon",
        "operationId": "addons_post",
        "parameters": [
          {
            "type": "string",
            "description": "SHA-256 fingerprint of package e.g b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
            "name": "X-AMS-Fingerprint",
            "in": "header"
          },
          {
            "type": "string",
            "description": "JSON encoded byte string of addon details e.g { \"name\": \"my-addon\" }",
            "name": "X-AMS-Request",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/addons/{name}": {
      "get": {
        "description": "This endpoint gets the information of an addon stored in AMS.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "addons"
        ],
        "summary": "Get an addon",
        "operationId": "addon_get",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the addon to retrieve",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Addon"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes an addon stored in AMS.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "addons"
        ],
        "summary": "Delete an addon",
        "operationId": "addon_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the addon to delete",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates an addon's metadata and creates a new addon version\nfor it.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "addons"
        ],
        "summary": "Update an addon with a new package",
        "operationId": "addon_patch",
        "parameters": [
          {
            "type": "string",
            "description": "SHA-256 fingerprint of addon payload e.g b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
            "name": "X-AMS-Fingerprint",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Json encoded byte string of addon details e.g {}",
            "name": "X-AMS-Request",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the addon to update",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/addons/{name}/{version}": {
      "delete": {
        "description": "This endpoint deletes a specific version of an addon.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "addons"
        ],
        "summary": "Delete an addon version",
        "operationId": "addon_version_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the addon whose version needs to be deleted",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Version of the addon to delete",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/addons?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of available addons in the cluster.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "addons"
        ],
        "summary": "Get a list of addons expanded",
        "operationId": "addons_get_recursion1",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Addon"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/applications": {
      "get": {
        "description": "This endpoint returns a list of available applications.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Get a list of applications",
        "operationId": "applications_get",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "Index to start listing the records",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": -1,
            "description": "Limit the number of returned records",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          },
          {
            "type": "string",
            "example": "btavtegj1qm58qg7ru50",
            "description": "Filter applications by id. This is an exact match for the string.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-app",
            "description": "Filter applications by name. This is an exact match for the string.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "example": "a2.3",
            "description": "Filter applications by their instance_type.",
            "name": "instance_type",
            "in": "query"
          },
          {
            "enum": [
              "initializing",
              "ready",
              "error",
              "deleted"
            ],
            "type": "string",
            "example": "initializing",
            "description": "Filter applications by status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "example": "com.foo.bar",
            "description": "Filter applications by their boot package.",
            "name": "boot_package",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": false,
            "description": "Filter immutable applications.",
            "name": "immutable",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": false,
            "description": "Filter applications with automatic updates enabled.",
            "name": "inhibit_auto_updates",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": false,
            "description": "Filter published applications.",
            "name": "published",
            "in": "query"
          },
          {
            "type": "string",
            "example": "gms,ssh",
            "description": "Filter applications by their attached addon names.",
            "name": "addons",
            "in": "query"
          },
          {
            "type": "string",
            "example": "x86_64",
            "description": "Filter applications by their supported ABI architecture.",
            "name": "abi",
            "in": "query"
          },
          {
            "type": "string",
            "example": "created_by=anbox,foo,bar",
            "description": "Filter applications by tags.",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/applications/foo\",\n  \"/1.0/applications/bar\"\n]"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a new application in AMS using a manifest file. The\npayload to upload must be a tarball compressed with bzip2 or a zip archive.\nAlso it must contain a **manifest.yaml** file which declares the basic\ninformation for the creation of the application.\n\nRequired Extensions:\n`zip_archive_support`: To use the zip format, the server must have the extension.\nTo support the following syntax in the application **manifest.yaml** file, the\nserver requires the corresponding extensions:\n Manifest Key     | Required Extension                 |\n ---------------- | -----------------------------------|\n resources        | application_resource_customization |\n watchdog         | application_watchdog_settings      |\n services         | application_services_configuration |\n version          | application_manifest_version       |\n video-encoder    | application_gpu_encoder            |",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Create a new application",
        "operationId": "application_post",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Whether the application is based on a virtual machine or a container",
            "name": "vm",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SHA-256 fingerprint of the payload e.g b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
            "name": "X-AMS-Fingerprint",
            "in": "header"
          },
          {
            "type": "file",
            "description": "A tarball or zip file",
            "name": "upfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes multiple applications. If the deletion of a single application\nfails the operation is aborted and an error is returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Delete multiple applications",
        "operationId": "applications_delete",
        "parameters": [
          {
            "description": "List of applications to delete",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApplicationsDelete"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/applications/{id}": {
      "get": {
        "description": "This endpoint gets the information about an application stored in AMS.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Get information about an application",
        "operationId": "application_get",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Application"
                }
              }
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes an application and its versions from AMS.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Delete an application",
        "operationId": "application_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates an application with a new package of format bzip2 or\nzip by uploading a new package to replace/update the existing package.\n\nRequired Extensions:\n`zip_archive_support`: To use the zip format, the server must have the extension.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Update an application with a new package",
        "operationId": "application_patch_upload",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "SHA-256 fingerprint of application e.g b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
            "name": "X-AMS-Fingerprint",
            "in": "header"
          },
          {
            "type": "file",
            "description": "A tarball or zip file",
            "name": "upfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/applications/{id}/": {
      "patch": {
        "description": "This endpoint updates an applications's metadata only but not the package.\nChanging the following fields will lead to the creation of a new application\nversion:\n\n   SUPPORTED UPDATE FIELD  |   WILL CREATE A NEW APPLICATION VERSION   |\n ------------------------- | ----------------------------------------- |\n   image                   |   no                                      |\n   instance-type           |   no                                      |\n   tags                    |   no                                      |\n   addons                  |   no                                      |\n   resources               |   no                                      |\n   inhibit_auto_updates    |   no                                      |\n   services                |   yes                                     |\n   watchdog                |   yes                                     |\n   boot_activity           |   yes                                     |\n   required_permissions    |   yes                                     |\n   video_encoder           |   yes                                     |\n   manifest_version        |   yes                                     |\n\nRequired Extensions:\n`application_partial_updates`: To use those fields that would create a new\napplication version on application update.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Update an applications's metadata",
        "operationId": "application_patch_meta",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Details of the attributes to update",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApplicationPatch"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/applications/{id}/manifest": {
      "get": {
        "description": "This endpoint gets the latest application manifest file.\n\nRequired Extensions:\n`application_manifest_download`: The use of this API requires this extension",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Get an application's manifest",
        "operationId": "application_manifest_get",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application to retrieve",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "headers": {
              "X-AMS-ManifestSha256": {
                "type": "string",
                "description": "SHA-256 of the manifest file"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/applications/{id}/{version}": {
      "get": {
        "description": "This endpoint gets the information of a specific version of an application.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Get information about an application's specific version",
        "operationId": "application_version_get",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Version of the application",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "headers": {
              "X-AMS-ManifestSha256": {
                "type": "string",
                "description": "SHA-256 of the version manifest file"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes a specific version of an application.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Delete a version of an application",
        "operationId": "application_version_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Version of the application",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "description": "Details for the application version to delete",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApplicationVersionDelete"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates the information of a specific version of an application.\n\nRequired Extensions:\n`application_image_export`: The use of this API requires this extension",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Update a specific version of an application",
        "operationId": "application_version_patch",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Version of the application",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "description": "Details for the application version to update",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApplicationVersionPatch"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/applications/{id}/{version}/manifest": {
      "get": {
        "description": "This endpoint gets the application manifest file of one specific application\nversion.\n\nRequired Extensions:\n`application_manifest_download`: The use of this API requires this extension",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Get the manifest for a specific version of an application",
        "operationId": "application_version_manifest_get",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the application to retrieve",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Version of the application to retrieve",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "headers": {
              "X-AMS-ManifestSha256": {
                "type": "string",
                "description": "SHA-256 of the manifest file"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/applications?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of available applications in the cluster.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "applications"
        ],
        "summary": "Get a list of applications with expanded object definitions",
        "operationId": "applications_get_recursion1",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "Index to start listing the records",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": -1,
            "description": "Limit the number of returned records",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          },
          {
            "type": "string",
            "example": "btavtegj1qm58qg7ru50",
            "description": "Filter applications by id. This is an exact match for the string.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-app",
            "description": "Filter applications by name. This is an exact match for the string.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "example": "a2.3",
            "description": "Filter applications by their instance_type.",
            "name": "instance_type",
            "in": "query"
          },
          {
            "enum": [
              "initializing",
              "ready",
              "error",
              "deleted"
            ],
            "type": "string",
            "example": "initializing",
            "description": "Filter applications by status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "example": "com.foo.bar",
            "description": "Filter applications by their boot package.",
            "name": "boot_package",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": false,
            "description": "Filter immutable applications.",
            "name": "immutable",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": false,
            "description": "Filter applications with automatic updates enabled.",
            "name": "inhibit_auto_updates",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": false,
            "description": "Filter published applications.",
            "name": "published",
            "in": "query"
          },
          {
            "type": "string",
            "example": "gms,ssh",
            "description": "Filter applications by their attached addon names.",
            "name": "addons",
            "in": "query"
          },
          {
            "type": "string",
            "example": "x86_64",
            "description": "Filter applications by their supported ABI architecture.",
            "name": "abi",
            "in": "query"
          },
          {
            "type": "string",
            "example": "created_by=anbox,foo,bar",
            "description": "Filter applications by tags.",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Application"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/certificates": {
      "get": {
        "description": "This endpoint returns a list of certificates of trusted clients",
        "produces": [
          "application/json"
        ],
        "tags": [
          "certificates"
        ],
        "summary": "Get a list of certificates",
        "operationId": "certificates_get",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/certificates/b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n  \"/1.0/certificates/a52c80e8337d3e08a52e52c6aa25ecfac473eae34a4880ed0088b9dbc2fagcd5\"\n]"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "This endpoint adds a new trusted client to the service by adding a new\nclient certificate.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "certificates"
        ],
        "summary": "Add a new client certificate",
        "operationId": "certificates_post",
        "parameters": [
          {
            "description": "Details of the certificate to create",
            "name": "details",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificatesPost"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/certificates/{fingerprint}": {
      "get": {
        "description": "The endpoint gets the information of a trusted client's certificate and its\nfingerprint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "certificates"
        ],
        "summary": "Get the information about a certificate",
        "operationId": "certificate_get",
        "parameters": [
          {
            "type": "string",
            "description": "SHA-256 fingerprint of the certificate to retrieve",
            "name": "fingerprint",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Certificate"
                }
              }
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes a client's trusted certificate from the service's\ntrust store.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "certificates"
        ],
        "summary": "Delete a client's trusted certificate",
        "operationId": "certificate_delete",
        "parameters": [
          {
            "type": "string",
            "description": "SHA-256 fingerprint of the certificate",
            "name": "fingerprint",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/certificates?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of certificates of trusted clients.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "certificates"
        ],
        "summary": "Get a list of expanded certificates",
        "operationId": "certificates_get_recursion1",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Certificate"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/config": {
      "get": {
        "description": "This endpoint shows the current configuration values for the service.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Get the current configuration of the service",
        "operationId": "config_get",
        "responses": {
          "200": {
            "description": "Current config for the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "type": "object",
                  "properties": {
                    "config": {
                      "description": "Configuration of the service",
                      "type": "object",
                      "properties": {
                        "agent.api.fingerprint": {
                          "description": "Fingerprint of certificate in the AMS trust store which is trusted when communicating with the stream agent",
                          "type": "string",
                          "default": "",
                          "example": "fd42316b32df"
                        },
                        "agent.api.token": {
                          "description": "Token to be used for API authentication with stream agent",
                          "type": "string",
                          "default": "",
                          "example": "foobar"
                        },
                        "agent.api.url": {
                          "description": "URL for stream agent API endpoint",
                          "type": "string",
                          "default": "",
                          "example": "https://foo.bar:9001"
                        },
                        "application.addons": {
                          "description": "Enable addons globally for applications",
                          "type": "string",
                          "default": "",
                          "example": "my-addon"
                        },
                        "application.auto_publish": {
                          "description": "Automatically publish the latest version for an application",
                          "type": "boolean",
                          "default": true
                        },
                        "application.auto_update": {
                          "description": "Automatically update the images and applications to the latest versions",
                          "type": "boolean",
                          "default": true
                        },
                        "application.default_abi": {
                          "description": "Set a default support ABI architecture globally",
                          "type": "string",
                          "default": "",
                          "example": "arm64-v8a"
                        },
                        "application.max_published_versions": {
                          "description": "Set the maximum number of application versions to publish",
                          "type": "integer",
                          "format": "int32",
                          "default": 3,
                          "example": 3
                        },
                        "container.apt_mirror": {
                          "description": "APT mirror to use for downloading dependencies inside the container",
                          "type": "string",
                          "default": "",
                          "example": "http://ports.ubuntu.com/ubuntu-ports"
                        },
                        "container.default_platform": {
                          "description": "Platform to be forwarded to the container for running audio/video operations",
                          "type": "string",
                          "default": "null",
                          "enum": [
                            "null",
                            "webrtc",
                            "swrast"
                          ],
                          "example": "webrtc"
                        },
                        "container.features": {
                          "description": "Enable additional android features",
                          "type": "string",
                          "default": "",
                          "example": "enable_virtual_keyboard,foo"
                        },
                        "container.security_updates": {
                          "description": "Enable/disable security update for containers",
                          "type": "boolean",
                          "default": true
                        },
                        "core.debug_address": {
                          "description": "Address used to expose debug information on",
                          "type": "string",
                          "default": "",
                          "example": "https://127.0.0.1:9090"
                        },
                        "core.proxy_http": {
                          "description": "Proxy variables inside container",
                          "type": "string",
                          "default": "",
                          "example": "http://my-proxy:8000"
                        },
                        "core.proxy_https": {
                          "description": "Proxy variables inside container",
                          "type": "string",
                          "default": "",
                          "example": "http://my-proxy:8000"
                        },
                        "core.proxy_ignore_hosts": {
                          "description": "Proxy variables inside container",
                          "type": "string",
                          "default": "",
                          "example": "localhost,127.0.0.1"
                        },
                        "core.trust_password": {
                          "description": "Trust password used to add remote clients.\nAMS does not expose the actual password\nbut only the fact that it is set or not.",
                          "type": "string",
                          "default": "",
                          "example": "sUp3rS3cR3t"
                        },
                        "cpu.limit_mode": {
                          "description": "CPU limiting strategies used for a container",
                          "type": "string",
                          "default": "scheduler",
                          "enum": [
                            "scheduler",
                            "pinning"
                          ],
                          "example": "scheduler"
                        },
                        "gpu.allocation_mode": {
                          "description": "GPU allocation mode",
                          "type": "string",
                          "default": "single",
                          "enum": [
                            "all",
                            "single"
                          ],
                          "example": "single"
                        },
                        "gpu.type": {
                          "description": "GPU type. Can be `none`, `nvidia`, `intel` or `amd`",
                          "type": "string",
                          "default": "none",
                          "enum": [
                            "none",
                            "nvidia",
                            "amd",
                            "intel"
                          ],
                          "example": "none"
                        },
                        "images.allow_insecure": {
                          "description": "Allow insecure TLS for accessing image registry",
                          "type": "boolean",
                          "default": false
                        },
                        "images.auth": {
                          "description": "Auth token required to access the image registry",
                          "type": "string",
                          "default": "",
                          "example": "user:password"
                        },
                        "images.update_interval": {
                          "description": "Interval used to check for image updates",
                          "type": "string",
                          "default": "5m",
                          "example": "5m"
                        },
                        "images.url": {
                          "description": "Image registry URL",
                          "type": "string",
                          "default": "https://images.anbox-cloud.io/stable/",
                          "example": "https://images.anbox-cloud.io/stable/"
                        },
                        "images.version_lockstep": {
                          "description": "Lock latest image version to align with latest AMS version",
                          "type": "boolean",
                          "default": true
                        },
                        "instance.apt_mirror": {
                          "description": "APT mirror to use for downloading dependencies inside the instance",
                          "type": "string",
                          "default": "",
                          "example": "http://ports.ubuntu.com/ubuntu-ports"
                        },
                        "instance.default_platform": {
                          "description": "Platform to be forwarded to the instance for running audio/video operations",
                          "type": "string",
                          "default": "null",
                          "enum": [
                            "null",
                            "webrtc",
                            "swrast"
                          ],
                          "example": "webrtc"
                        },
                        "instance.features": {
                          "description": "Enable additional android features",
                          "type": "string",
                          "default": "",
                          "example": "enable_virtual_keyboard,foo"
                        },
                        "instance.security_updates": {
                          "description": "Enable/disable security update for instance",
                          "type": "boolean",
                          "default": true
                        },
                        "load_balancer.url": {
                          "description": "Set host URL for AMS to loadbalancer's URL",
                          "type": "string",
                          "default": "",
                          "example": "https://load-balanced-ams.com"
                        },
                        "node.queue_size": {
                          "description": "Queue size for internal AMS workers",
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "example": 100
                        },
                        "node.workers_per_queue": {
                          "description": "Number of internal workers for AMS",
                          "type": "integer",
                          "format": "int32",
                          "default": 4,
                          "example": 4
                        },
                        "registry.filter": {
                          "description": "Tag filters used for selecting applications when interacting with the registry",
                          "type": "string",
                          "default": "",
                          "example": "foo,bar"
                        },
                        "registry.fingerprint": {
                          "description": "Fingerprint used to verify the ceritifcate of the application registry",
                          "type": "string",
                          "default": "",
                          "example": "my-registry-fingerprint"
                        },
                        "registry.mode": {
                          "description": "Mode used to interact with the registry",
                          "type": "string",
                          "default": "pull",
                          "enum": [
                            "push",
                            "pull",
                            "manual"
                          ],
                          "example": "pull"
                        },
                        "registry.update_interval": {
                          "description": "Interval used for checking for updates to applications",
                          "type": "string",
                          "default": "1h",
                          "example": "1h"
                        },
                        "registry.url": {
                          "description": "Application registry URL",
                          "type": "string",
                          "default": "",
                          "example": "https://foo.bar/"
                        },
                        "scheduler.strategy": {
                          "description": "Container scheduling startegy",
                          "type": "string",
                          "default": "spread",
                          "enum": [
                            "spread",
                            "binpack"
                          ],
                          "example": "spread"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates the configuration items for the service.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Update service configuration",
        "operationId": "config_patch",
        "parameters": [
          {
            "description": "Configuration items to change",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConfigPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/containers": {
      "get": {
        "description": "This endpoint returns a list of container API endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Get a list of containers",
        "operationId": "containers_get",
        "parameters": [
          {
            "type": "integer",
            "description": "Maximum number of containers to provide",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset at which to start with listing containers",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsreunfpfec9b1ktg0",
            "description": "Filter containers by id. This is an exact match for the string.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ams-cilsreunfpfec9b1ktg0",
            "description": "Filter containers by name. This is an exact match for the string.",
            "name": "name",
            "in": "query"
          },
          {
            "enum": [
              "base",
              "regular"
            ],
            "type": "string",
            "description": "Filter containers by type.",
            "name": "type",
            "in": "query"
          },
          {
            "enum": [
              "created",
              "prepared",
              "stopped",
              "running",
              "error",
              "deleted"
            ],
            "type": "string",
            "description": "Filter containers by status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "example": "lxd0",
            "description": "Filter containers by the LXD node name.",
            "name": "node",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsiomnfpfec9b1kteg",
            "description": "Filter containers by the application ID. This is an exact match for the string.",
            "name": "app_id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-app",
            "description": "Filter containers by the application name. This is an exact match for the string.",
            "name": "app_name",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter containers by the application version.",
            "name": "app_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsiomnfpfec9b1kteg",
            "description": "Filter containers by the image ID. This is an exact match for the string.",
            "name": "image_id",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter containers by the image version.",
            "name": "image_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "created_by=anbox,foo,bar",
            "description": "Filter containers by tags.",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "API endpoints",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/containers/foo\",\n  \"/1.0/containers/bar\"\n]"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a new container instance with the provided specification.\nIf AMS cannot fullfil the resource requirements for creating the instance,\nthe request will fail.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Create a new container instance",
        "operationId": "containers_post",
        "parameters": [
          {
            "description": "Specification of the container to create",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContainersPost"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes all specified containers. If the deletion of a single\ncontainer fails, the operation is aborted and an error is returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Delete multiple containers.",
        "operationId": "containers_delete",
        "parameters": [
          {
            "description": "List of containers to delete",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContainersDelete"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/containers/{id}": {
      "get": {
        "description": "This endpoint returns information about a specific container instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Get information about a specific container instance.",
        "operationId": "container_get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Container instance details",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Container"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes a specific container. The deletion process happens\nasynchronously. The operation progress can be checked via the returned\noperation object.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Delete a specific container",
        "operationId": "container_delete",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Additional details for the delete operation.",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContainerDelete"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint allows changing the state of a specific container instance.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Update the state of a specific container instance",
        "operationId": "container_patch",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContainerPatch"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/containers/{id}/exec": {
      "post": {
        "description": "This endpoint is used to run a command in the container. The endpoint returns\nan operation which will contain either 2 or 4 websockets.\nIn non-interactive mode, you'll get one websocket for each of stdin, stdout and stderr.\nIn interactive mode, a single bi-directional websocket is used for stdin and stdout/stderr.\n\nAn additional \"control\" socket is always added on top which can be used for out of band\ncommunication with LXD. This allows sending signals and window sizing information through.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Execute a command in a container",
        "operationId": "container_exec_post",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Exec request",
            "name": "exec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContainerExecPost"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/containers/{id}/logs": {
      "get": {
        "description": "This endpoint returns a container's collected log files. If a container has\nbeen set to status \"error\" AMS will automatically collect, logs for further\ninspection.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Get a list of collected log files for the container",
        "operationId": "container_logs_get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Collected log files",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of collected logs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n \"/1.0/containers/cilsiomnfpfec9b1kteg/logs/android.log\",\n \"/1.0/containers/cilsiomnfpfec9b1kteg/logs/system.log\"\n]"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/containers/{id}/logs/{name}": {
      "get": {
        "description": "This endpoint returns the collected log file as a raw file.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Retrieve a specific log file stored for the container",
        "operationId": "container_logs_specific_get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the log to retrieve",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Raw file"
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/containers?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of containers.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "containers"
        ],
        "summary": "Get a list of containers",
        "operationId": "containers_get_recursion1",
        "parameters": [
          {
            "type": "integer",
            "description": "Maximum number of containers to provide",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset at which to start with listing containers",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsreunfpfec9b1ktg0",
            "description": "Filter containers by id. This is an exact match for the string.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ams-cilsreunfpfec9b1ktg0",
            "description": "Filter containers by name. This is an exact match for the string.",
            "name": "name",
            "in": "query"
          },
          {
            "enum": [
              "base",
              "regular"
            ],
            "type": "string",
            "description": "Filter containers by type.",
            "name": "type",
            "in": "query"
          },
          {
            "enum": [
              "created",
              "prepared",
              "stopped",
              "running",
              "error",
              "deleted"
            ],
            "type": "string",
            "description": "Filter containers by status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "example": "lxd0",
            "description": "Filter containers by the LXD node name.",
            "name": "node",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsiomnfpfec9b1kteg",
            "description": "Filter containers by the application ID. This is an exact match for the string.",
            "name": "app_id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-app",
            "description": "Filter containers by the application name. This is an exact match for the string.",
            "name": "app_name",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter containers by the application version.",
            "name": "app_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsiomnfpfec9b1kteg",
            "description": "Filter containers by the image ID. This is an exact match for the string.",
            "name": "image_id",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter containers by the image version.",
            "name": "image_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "created_by=anbox,foo,bar",
            "description": "Filter containers by tags.",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "API endpoints",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of containers",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Container"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/events": {
      "get": {
        "description": "This endpoint will upgrade the connection to a websocket on which\nnotifications will be sent. The client can subscribe to different types of\nevents or only listen to the required events.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "events"
        ],
        "summary": "Listen to events for changes in AMS",
        "operationId": "events_get",
        "parameters": [
          {
            "enum": [
              "all",
              "operation",
              "lifecycle"
            ],
            "type": "string",
            "default": "all",
            "description": "Type of event. If left empty, the parameter corresponds to 'all' events.",
            "name": "type",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "This api endpoint never returns. This websocket sends out JSON\ndictionaries of the given format for events",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/images": {
      "get": {
        "description": "This endpoint returns a list of images available in the cluster.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Get a list of images",
        "operationId": "images_get",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/images/foo\",\n  \"/1.0/images/bar\"\n]"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "This endpoint imports an image into AMS cluster from an image server using\nits name.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Import an image",
        "operationId": "image_post_import",
        "parameters": [
          {
            "description": "Details of the image to create",
            "name": "details",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImagesPost"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/images/": {
      "post": {
        "description": "This endpoint allows the client to upload an image with a new package of\nformat gzip, bzip2 or xz.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Upload a package to create an image",
        "operationId": "image_post_upload",
        "parameters": [
          {
            "type": "string",
            "description": "SHA-256 fingerprint of image e.g b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
            "name": "X-AMS-Fingerprint",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Json encoded byte string of image details for e.g { \"name\": \"my-image\",  \"default\": false }",
            "name": "X-AMS-Request",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/images/{id_or_name}": {
      "get": {
        "description": "This endpoint gets the information about an image stored in AMS.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Get information about an image",
        "operationId": "image_get",
        "parameters": [
          {
            "type": "string",
            "description": "Id or name of the image to retrieve",
            "name": "id_or_name",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "container",
              "vm"
            ],
            "type": "string",
            "default": "container",
            "description": "Type of the image variant to return could be `vm` or `container`",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Image"
                }
              }
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/images/{id}": {
      "delete": {
        "description": "This endpoint deletes an image stored in AMS.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Delete an image",
        "operationId": "image_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the image to delete",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "details for deleting the image",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImageDelete"
            }
          },
          {
            "enum": [
              "container",
              "vm"
            ],
            "type": "string",
            "default": "container",
            "description": "Type of the image variant to return could be `vm` or `container`",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates an existing image with a new package of format gzip,\nbzip2 or xz.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Update an image with a new package to upload",
        "operationId": "image_patch_upload",
        "parameters": [
          {
            "type": "string",
            "description": "SHA-256 fingerprint of image e.g b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
            "name": "X-AMS-Fingerprint",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Json encoded byte string of image details e.g { \"name\": \"my-image\",  \"default\": false }",
            "name": "X-AMS-Request",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Id of the image to update",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/images/{id}/": {
      "patch": {
        "description": "This endpoint updates an image's metadata only but not the package.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Update an image's metadata",
        "operationId": "image_patch_meta",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the image to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Details of the attributes to update",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImagePatch"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/images/{id}/{version}": {
      "delete": {
        "description": "This endpoint deletes a specific version of a stored image.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Delete an image version",
        "operationId": "image_version_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Id or name of the image whose version needs to be deleted",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Version of the image to delete",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/images?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of images available in the cluster.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Get the list of images expanded",
        "operationId": "images_get_recursion1",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Image"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/instances": {
      "get": {
        "description": "This endpoint returns a list of instance API endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Get a list of instances",
        "operationId": "instances_get",
        "parameters": [
          {
            "type": "integer",
            "description": "Maximum number of instances to provide",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset at which to start with listing instances",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsreunfpfec9b1ktg0",
            "description": "Filter instances by id. This is an exact match for the string.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ams-cilsreunfpfec9b1ktg0",
            "description": "Filter instances by name. This is an exact match for the string.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": true,
            "description": "Filter base instances. The instances which are not base, are regular instances.",
            "name": "base",
            "in": "query"
          },
          {
            "enum": [
              "vm",
              "container"
            ],
            "type": "string",
            "description": "Filter instances by type.",
            "name": "type",
            "in": "query"
          },
          {
            "enum": [
              "created",
              "prepared",
              "stopped",
              "running",
              "error",
              "deleted"
            ],
            "type": "string",
            "description": "Filter instances by status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "example": "lxd0",
            "description": "Filter instances by the LXD node name.",
            "name": "node",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsiomnfpfec9b1kteg",
            "description": "Filter instances by the application ID. This is an exact match for the string.",
            "name": "app_id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-app",
            "description": "Filter instances by the application name. This is an exact match for the string.",
            "name": "app_name",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter instances by the application version.",
            "name": "app_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilshrmnfpfec9b1kte0",
            "description": "Filter instances by the image ID. This is an exact match for the string.",
            "name": "image_id",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter instances by the image version.",
            "name": "image_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "created_by=anbox,foo,bar",
            "description": "Filter instances by tags.",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "API endpoints",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/instances/foo\",\n  \"/1.0/instances/bar\"\n]"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a new instance instance with the provided specification.\nIf AMS cannot fullfil the resource requirements for creating the instance,\nthe request will fail.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Create a new instance",
        "operationId": "instances_post",
        "parameters": [
          {
            "description": "Specification of the instance to create",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InstancesPost"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes all specified instances. If the deletion of a single\ninstance fails, the operation is aborted and an error is returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Delete multiple instances.",
        "operationId": "instances_delete",
        "parameters": [
          {
            "description": "List of instances to delete",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InstancesDelete"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/instances/{id_or_name}": {
      "get": {
        "description": "This endpoint returns information about a specific instance instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Get information about a specific instance instance.",
        "operationId": "instance_get",
        "parameters": [
          {
            "type": "string",
            "name": "id_or_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Instance instance details",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Instance"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes a specific instance. The deletion process happens\nasynchronously. The operation progress can be checked via the returned\noperation object.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Delete a specific instance",
        "operationId": "instance_delete",
        "parameters": [
          {
            "type": "string",
            "name": "id_or_name",
            "in": "path",
            "required": true
          },
          {
            "description": "Additional details for the delete operation.",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InstanceDelete"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint allows changing the state of a specific instance instance.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Update the state of a specific instance instance",
        "operationId": "instance_patch",
        "parameters": [
          {
            "type": "string",
            "name": "id_or_name",
            "in": "path",
            "required": true
          },
          {
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InstancePatch"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/instances/{id_or_name}/exec": {
      "post": {
        "description": "This endpoint is used to run a command in the instance. The endpoint returns\nan operation which will contain either 2 or 4 websockets.\nIn non-interactive mode, you'll get one websocket for each of stdin, stdout and stderr.\nIn interactive mode, a single bi-directional websocket is used for stdin and stdout/stderr.\n\nAn additional \"control\" socket is always added on top which can be used for out of band\ncommunication with LXD. This allows sending signals and window sizing information through.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Execute a command in a instance",
        "operationId": "instance_exec_post",
        "parameters": [
          {
            "type": "string",
            "name": "id_or_name",
            "in": "path",
            "required": true
          },
          {
            "description": "Exec request",
            "name": "exec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InstanceExecPost"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/instances/{id_or_name}/logs": {
      "get": {
        "description": "This endpoint returns a instance's collected log files. If a instance has\nbeen set to status \"error\" AMS will automatically collect, logs for further\ninspection.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Get a list of collected log files for the instance",
        "operationId": "instance_logs_get",
        "parameters": [
          {
            "type": "string",
            "name": "id_or_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Collected log files",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of collected logs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n \"/1.0/instances/cilsiomnfpfec9b1kteg/logs/android.log\",\n \"/1.0/instances/cilsiomnfpfec9b1kteg/logs/system.log\"\n]"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/instances/{id_or_name}/logs/{name}": {
      "get": {
        "description": "This endpoint returns the collected log file as a raw file.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Retrieve a specific log file stored for the instance",
        "operationId": "instance_logs_specific_get",
        "parameters": [
          {
            "type": "string",
            "name": "id_or_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the log to retrieve",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Raw file"
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/instances?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of instances.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Get a list of instances",
        "operationId": "instances_get_recursion1",
        "parameters": [
          {
            "type": "integer",
            "description": "Maximum number of instances to provide",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset at which to start with listing instances",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsreunfpfec9b1ktg0",
            "description": "Filter instances by id. This is an exact match for the string.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ams-cilsreunfpfec9b1ktg0",
            "description": "Filter instances by name. This is an exact match for the string.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "example": true,
            "description": "Filter base instances. The instances which are not base, are regular instances.",
            "name": "base",
            "in": "query"
          },
          {
            "enum": [
              "vm",
              "container"
            ],
            "type": "string",
            "description": "Filter instances by type.",
            "name": "type",
            "in": "query"
          },
          {
            "enum": [
              "created",
              "prepared",
              "stopped",
              "running",
              "error",
              "deleted"
            ],
            "type": "string",
            "description": "Filter instances by status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "example": "lxd0",
            "description": "Filter instances by the LXD node name.",
            "name": "node",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilsiomnfpfec9b1kteg",
            "description": "Filter instances by the application ID. This is an exact match for the string.",
            "name": "app_id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-app",
            "description": "Filter instances by the application name. This is an exact match for the string.",
            "name": "app_name",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter instances by the application version.",
            "name": "app_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "cilshrmnfpfec9b1kte0",
            "description": "Filter instances by the image ID. This is an exact match for the string.",
            "name": "image_id",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Filter instances by the image version.",
            "name": "image_version",
            "in": "query"
          },
          {
            "type": "string",
            "example": "created_by=anbox,foo,bar",
            "description": "Filter instances by tags.",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "API endpoints",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of instances",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Instance"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/nodes": {
      "get": {
        "description": "This endpoint returns a list of available nodes known to AMS.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "nodes"
        ],
        "summary": "Get a list of nodes",
        "operationId": "nodes_get",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/nodes/foo\",\n  \"/1.0/nodes/bar\"\n ]"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a node in AMS which can be a precreated (unmanaged)\nLXD node or a managed node created by AMS bootstrapping LXD.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nodes"
        ],
        "summary": "Create a node",
        "operationId": "node_post",
        "parameters": [
          {
            "description": "AMS Node to create",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NodesPost"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/nodes/{name}": {
      "get": {
        "description": "This endpoint returns information about a node in AMS and its resources from\nthe LXD cluster.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nodes"
        ],
        "summary": "Get information about a node",
        "operationId": "node_get",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the node to get",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Node"
                }
              }
            },
            "headers": {
              "Etag": {
                "type": "string",
                "description": "E-Tag of the resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes a node in AMS and its resources from the LXD cluster.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nodes"
        ],
        "summary": "Delete a node",
        "operationId": "node_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the node to delete",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "Info required to delete the resource",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NodeDelete"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a node and its resources in the cluster.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nodes"
        ],
        "summary": "Update a node",
        "operationId": "node_patch",
        "parameters": [
          {
            "type": "string",
            "description": "Etag of the resource",
            "name": "Etag",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Name of the node to delete",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "Info required to update the resource",
            "name": "details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NodePatch"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/definitions/OperationResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "409": {
            "$ref": "#/responses/ErrorAlreadyExists"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/nodes?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of available nodes known to AMS.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "nodes"
        ],
        "summary": "Get a list of nodes",
        "operationId": "nodes_get_recursion1",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Node"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/operations": {
      "get": {
        "description": "This endpoint returns a list of URLs for operations that are currently in\nprogress or queued.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "operations"
        ],
        "summary": "Get a list of operations",
        "operationId": "operations_get",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "description": "List of endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "[\n  \"/1.0/operations/foo\",\n  \"/1.0/operations/bar\"\n]"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/operations/{uuid}": {
      "get": {
        "description": "This endpoint gets the information about an operation.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "operations"
        ],
        "summary": "Get the current status of an operation",
        "operationId": "operation_get",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of the operation",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Operation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "description": "This endpoint is used to change the state of cancellable API to “cancelling”\nrather than actually removing the operation entry.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "operations"
        ],
        "summary": "Cancel an operation",
        "operationId": "operation_delete",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of the operation",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Success response of the service",
            "schema": {
              "$ref": "#/responses/EmptySyncResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/operations/{uuid}/wait": {
      "get": {
        "description": "This is a synchronous endpoint for a client to wait until an operation\nreaches a final status.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "operations"
        ],
        "summary": "Wait for an operation to complete",
        "operationId": "operation_wait_get",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of the operation",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "The amount of time (in seconds) to wait until the operation is considered\nto be timed out. If the value is assigned to -1, the operation will wait\ninfinitely until the monitored operation reaches a final status.",
            "name": "timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/Operation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/operations/{uuid}/websocket": {
      "get": {
        "description": "The connection to this endpoint is upgraded into a websocket connection,\nspeaking the protocol defined by the operation type. For example, in the\ncase of an exec operation, the websocket is the bidirectional pipe for\nstdin/stdout/stderr to flow to and from the process inside the container.\nIn the case of migration, it will be the primary interface over which the\nmigration information is communicated.",
        "tags": [
          "operations"
        ],
        "summary": "Get the websocket connection to monitor operation",
        "operationId": "operation_websocket_get",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of the operation",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "This is the secret that was provided when the operation was created.\nGuests are allowed to connect only if they have the correct secret.",
            "name": "secret",
            "in": "query"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "401": {
            "$ref": "#/responses/ErrorUnauthorized"
          },
          "403": {
            "$ref": "#/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/responses/ErrorNotFound"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/operations?recursion=1": {
      "get": {
        "description": "This endpoint returns a list of operations that are currently in progress\nor queued.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "operations"
        ],
        "summary": "Get a list of expanded operations",
        "operationId": "operations_get_recursion1",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/CollectionResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Operation"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/tasks": {
      "get": {
        "description": "This endpoint returns a list of tasks in AMS.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Get a list of tasks",
        "operationId": "tasks_get",
        "parameters": [
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "default": 0,
            "description": "Expand the returned resource definition",
            "name": "recursion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response of the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Task"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/1.0/version": {
      "get": {
        "description": "This endpoint returns the current running version for the service.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "service"
        ],
        "summary": "Get the current version for the service",
        "operationId": "version_get",
        "responses": {
          "200": {
            "description": "Current config for the service",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/NoMetaSyncResponse"
                }
              ],
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/VersionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "Addon": {
      "description": "Addon describes a package with additional functionality to be added to containers",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the addon",
          "type": "string",
          "example": "my-addon"
        },
        "used_by": {
          "description": "List of applications using this addon",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "app1",
            "app2"
          ]
        },
        "versions": {
          "description": "List of versions of the addon",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddonVersion"
          }
        }
      }
    },
    "AddonPatch": {
      "description": "AddonPatch allows updating an existing addon with a new version",
      "type": "object"
    },
    "AddonVersion": {
      "description": "AddonVersion describes a single version of an addon",
      "type": "object",
      "properties": {
        "created_at": {
          "description": "Creation timestamp of the addon",
          "type": "integer",
          "format": "int64",
          "example": 1610641117
        },
        "fingerprint": {
          "description": "SHA-256 fingerprint of the addon version",
          "type": "string",
          "example": "0791cfc011f67c60b7bd0f852ddb686b79fa46083d9d43ef9845c9235c67b261"
        },
        "size": {
          "description": "Size (in bytes) of the addon payload",
          "type": "integer",
          "format": "int64",
          "example": 529887868
        },
        "version": {
          "description": "Version for the addon",
          "type": "integer",
          "format": "int64",
          "example": 0
        }
      }
    },
    "AddonsPost": {
      "description": "AddonsPost is used to create a new addon",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the addon",
          "type": "string",
          "example": "my-addon"
        }
      }
    },
    "Application": {
      "description": "Application represents an AMS application",
      "type": "object",
      "properties": {
        "abi": {
          "description": "ABI supported by the application",
          "type": "string",
          "example": "x86_64"
        },
        "addons": {
          "description": "List of addons enabled for the application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "ssh",
            "gms"
          ]
        },
        "boot_package": {
          "description": "Name of the boot package for the application",
          "type": "string",
          "example": "com.foo.bar"
        },
        "created_at": {
          "description": "Creation UTC timestamp of the application",
          "type": "integer",
          "format": "int64",
          "example": 1532150640
        },
        "id": {
          "description": "ID of the application",
          "type": "string",
          "example": "btavtegj1qm58qg7ru50"
        },
        "immutable": {
          "description": "Flag to show whether the application can be edited",
          "type": "boolean",
          "example": false
        },
        "inhibit_auto_updates": {
          "description": "Whether or not to auto update the application's base image",
          "type": "boolean",
          "example": false
        },
        "instance_type": {
          "description": "Instance type required by the application",
          "type": "string",
          "example": "a2.3"
        },
        "name": {
          "description": "Name of the application",
          "type": "string",
          "example": "my-app"
        },
        "node_selector": {
          "description": "List of tags for filtering the nodes to run the application on",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "gpu=nvidia",
            "cpu=intel"
          ]
        },
        "parent_image_id": {
          "description": "Parent image used for the application",
          "type": "string",
          "example": "btavtegj1qm58qg7ru50"
        },
        "published": {
          "description": "Whether or not the application is published",
          "type": "boolean",
          "example": false
        },
        "resources": {
          "$ref": "#/definitions/ApplicationResources"
        },
        "status": {
          "description": "Current status of the application",
          "type": "string",
          "enum": [
            "initializing",
            "unknown",
            "ready",
            "deleted",
            "error"
          ],
          "example": "deleted"
        },
        "status_code": {
          "$ref": "#/definitions/ApplicationStatus"
        },
        "tags": {
          "description": "Tags to attach to the application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "created_by=anbox"
          ]
        },
        "versions": {
          "description": "List of versions for the application",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationVersion"
          }
        },
        "vm": {
          "description": "Whether the application is based on virtual machines or containers",
          "type": "boolean"
        }
      }
    },
    "ApplicationAddon": {
      "description": "ApplicationAddon describes a specific version of an addon an application version uses",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the application addon",
          "type": "string",
          "example": "ssh"
        },
        "version": {
          "description": "Version of the application addon",
          "type": "integer",
          "format": "int64",
          "example": 0
        }
      }
    },
    "ApplicationBootstrap": {
      "description": "ApplicationBootstrap describes the fields used to configure the application bootstrap",
      "type": "object",
      "properties": {
        "keep": {
          "description": "List of files to keep after the bootstrap",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "app.apk"
          ]
        }
      }
    },
    "ApplicationDelete": {
      "description": "ApplicationDelete represents the fields used to delete an application",
      "type": "object",
      "properties": {
        "force": {
          "description": "Whether deletion of the application should be forced",
          "type": "boolean",
          "example": false
        }
      }
    },
    "ApplicationExtraData": {
      "description": "ApplicationExtraData represents an extra application data",
      "type": "object",
      "properties": {
        "owner": {
          "description": "Owner and group for the files",
          "type": "string",
          "example": "root:root"
        },
        "permissions": {
          "description": "Unix permissions for the files",
          "type": "string",
          "example": "0644"
        },
        "target": {
          "description": "Path to the target file on the android filesystem",
          "type": "string",
          "example": "/sdcard/Android/obb/com.foo.bar/"
        }
      }
    },
    "ApplicationHooks": {
      "description": "ApplicationHooks describes the fields used to configure the hooks of an application",
      "type": "object",
      "properties": {
        "timeout": {
          "description": "Time limit to wait for the hook to complete before timing out",
          "type": "string",
          "example": "10m"
        }
      }
    },
    "ApplicationPatch": {
      "description": "ApplicationPatch represents the fields a user can modify",
      "type": "object",
      "properties": {
        "addons": {
          "description": "List of addons enabled for the application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "ssh",
            "gms"
          ]
        },
        "boot_activity": {
          "description": "Name of the boot package for the version",
          "type": "string",
          "example": "com.foo.bar.MainActivity"
        },
        "bootstrap": {
          "$ref": "#/definitions/ApplicationBootstrap"
        },
        "features": {
          "description": "List of features supported by the application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "feature1",
            "feature2"
          ]
        },
        "hooks": {
          "$ref": "#/definitions/ApplicationHooks"
        },
        "image": {
          "description": "Base image id or name to use for the applicaiton",
          "type": "string",
          "example": "btavtegj1qm58qg7ru50"
        },
        "inhibit_auto_updates": {
          "description": "Whether or not to auto update the application's base image",
          "type": "boolean",
          "example": false
        },
        "instance-type": {
          "description": "Instance type to use for the application",
          "type": "string",
          "example": "a3.4"
        },
        "manifest_version": {
          "description": "Version of the manifest used to create the application",
          "type": "string",
          "example": "0.1"
        },
        "node_selector": {
          "description": "List of tags for filtering the nodes to run the application on",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "gpu=nvidia",
            "cpu=intel"
          ]
        },
        "required_permissions": {
          "description": "Required android application permissions",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "android.permission.WRITE_EXTERNAL_STORAGE",
            "android.permission.READ_EXTERNAL_STORAGE"
          ]
        },
        "resources": {
          "$ref": "#/definitions/ApplicationResourcesPost"
        },
        "services": {
          "description": "List of services exposed by the application that should be expose on the instance\nFor application version update, changing those values would trigger a new application version creation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkServiceSpec"
          }
        },
        "tags": {
          "description": "Tags to attach to the application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "created_by=anbox"
          ]
        },
        "video_encoder": {
          "$ref": "#/definitions/VideoEncoderType"
        },
        "watchdog": {
          "$ref": "#/definitions/ApplicationWatchdog"
        }
      }
    },
    "ApplicationResources": {
      "description": "ApplicationResources describes resources allocated for an application",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "Number of CPUs required by the application",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "disk-size": {
          "description": "Storage size required by the application",
          "type": "string",
          "example": "3GB"
        },
        "gpu-slots": {
          "description": "Number of GPU slots required by the application",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "memory": {
          "description": "Memory to be assigned to the application",
          "type": "string",
          "example": "3GB"
        },
        "vpu-slots": {
          "description": "Number of VPU slots required by the application",
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      }
    },
    "ApplicationResourcesPost": {
      "description": "ApplicationResourcesPost represents the fields used to update an application resource",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "Number of CPUs required by the application",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "disk-size": {
          "description": "Storage size required by the application",
          "type": "string",
          "example": "3GB"
        },
        "gpu-slots": {
          "description": "Number of GPU slots required by the application",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "memory": {
          "description": "Memory to be assigned to the application",
          "type": "string",
          "example": "3GB"
        },
        "vpu-slots": {
          "description": "Number of VPU slots required by the application",
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      }
    },
    "ApplicationStatus": {
      "description": "ApplicationStatus represents the status an application can be in",
      "type": "integer",
      "format": "int64"
    },
    "ApplicationVersion": {
      "description": "ApplicationVersion describes a single version of an application",
      "type": "object",
      "properties": {
        "addons": {
          "description": "List of addons enabled for the version",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationAddon"
          }
        },
        "boot_activity": {
          "description": "Name of the boot package for the version",
          "type": "string",
          "example": "com.foo.bar.MainActivity"
        },
        "bootstrap": {
          "$ref": "#/definitions/ApplicationBootstrap"
        },
        "created_at": {
          "description": "Creation UTC timestamp of the version",
          "type": "integer",
          "format": "int64",
          "example": 1532150640
        },
        "error_message": {
          "description": "Error message in case the application ran into an error",
          "type": "string",
          "example": "{}"
        },
        "extra_data": {
          "description": "Extra data to be setup on the instance on application creation",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ApplicationExtraData"
          },
          "example": {}
        },
        "features": {
          "description": "List of features supported by the application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "feature1",
            "feature2"
          ]
        },
        "hooks": {
          "$ref": "#/definitions/ApplicationHooks"
        },
        "manifest_version": {
          "description": "Version of the manifest used to create the application",
          "type": "string",
          "example": "0.1"
        },
        "number": {
          "description": "Version of the application",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "parent_image_id": {
          "description": "Parent image used for the application version",
          "type": "string",
          "example": "btavtegj1qm58qg7ru50"
        },
        "parent_image_version": {
          "description": "Parent image version to use for the application version",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "published": {
          "description": "Whether or not the version is published",
          "type": "boolean",
          "example": false
        },
        "required_permissions": {
          "description": "Required android application permissions",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "android.permission.WRITE_EXTERNAL_STORAGE",
            "android.permission.READ_EXTERNAL_STORAGE"
          ]
        },
        "services": {
          "description": "List of services exposed by the application that should be exposed on the instance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkServiceSpec"
          }
        },
        "status": {
          "description": "Current status of the version",
          "type": "string",
          "enum": [
            "initializing",
            "unknown",
            "ready",
            "deleted",
            "error"
          ],
          "example": "deleted"
        },
        "status_code": {
          "$ref": "#/definitions/ImageStatus"
        },
        "video_encoder": {
          "$ref": "#/definitions/VideoEncoderType"
        },
        "watchdog": {
          "$ref": "#/definitions/ApplicationWatchdog"
        }
      }
    },
    "ApplicationVersionDelete": {
      "description": "ApplicationVersionDelete represents the fields used to delete an application version",
      "type": "object",
      "properties": {
        "force": {
          "description": "Whether deletion of the application version should be forced",
          "type": "boolean",
          "example": false
        }
      }
    },
    "ApplicationVersionPatch": {
      "description": "ApplicationVersionPatch represents the fields used to update an application version",
      "type": "object",
      "properties": {
        "published": {
          "description": "Used to publish a specific version of the application",
          "type": "boolean",
          "example": true
        }
      }
    },
    "ApplicationWatchdog": {
      "description": "ApplicationWatchdog describes the fields used to update an application watchdog",
      "type": "object",
      "properties": {
        "allowed-packages": {
          "description": "List of android packages to enable the watchdog for",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "com.android.settings"
          ]
        },
        "disabled": {
          "description": "Whether or not to enable the watchdog for the application",
          "type": "boolean",
          "example": true
        }
      }
    },
    "ApplicationsDelete": {
      "description": "ApplicationsDelete represents a list of application to delete together",
      "type": "object",
      "properties": {
        "force": {
          "description": "Whether deletion of the applications should be forced",
          "type": "boolean",
          "example": false
        },
        "ids": {
          "description": "IDs or names of the applications to delete",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "cilsreunfpfec9b1ktg0",
            "cilsreunfpfec9b1ktg1",
            "myapp"
          ]
        }
      }
    },
    "Certificate": {
      "description": "Certificate represents an available client certificate",
      "type": "object",
      "properties": {
        "certificate": {
          "description": "Base64 encoded certificate content without the header or the footer",
          "type": "string",
          "example": "MIIFUTCCAzmgAw...xjKoUEEQOzJ9"
        },
        "fingerprint": {
          "description": "SHA-256 fingerprint of the certificate",
          "type": "string",
          "example": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
        }
      }
    },
    "CertificatesPost": {
      "description": "CertificatesPost represents the fields of a new auth provided certificate",
      "type": "object",
      "properties": {
        "certificate": {
          "description": "Base64 encoded certificate content without the header or the footer",
          "type": "string",
          "example": "MIIFUTCCAzmgAw...xjKoUEEQOzJ9"
        },
        "trust-password": {
          "description": "TrustPassword is used to register a new client with the service",
          "type": "string",
          "example": "sUp3rs3cr3t"
        }
      }
    },
    "CollectionResponse": {
      "description": "Collection Response",
      "allOf": [
        {
          "$ref": "#/definitions/NoMetaSyncResponse"
        },
        {
          "type": "object",
          "properties": {
            "total_size": {
              "description": "Total Count of the collection",
              "type": "integer",
              "format": "int64",
              "example": 99
            }
          }
        }
      ]
    },
    "ConfigItem": {
      "description": "ConfigItem represents a single configuration item",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ConfigPost": {
      "description": "ConfigPost contains the field necessary to set or update a config item",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "application.auto_publish"
        },
        "value": {
          "type": "string",
          "example": "false"
        }
      }
    },
    "Container": {
      "description": "Container represents a single container",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is the IP address of the container",
          "type": "string",
          "example": "192.168.1.74"
        },
        "app_id": {
          "description": "AppID is the ID of the application the container is created from. Empty if the\ncontainer has not been created from an application.",
          "type": "string",
          "example": "cilsiomnfpfec9b1kteg"
        },
        "app_name": {
          "description": "AppName is the name of the application the container is created from. Empty if the\ncontainer has not been created from an application.",
          "type": "string",
          "example": "myapp"
        },
        "app_version": {
          "description": "AppVersion is the version of the application the container is created from. Empty if the\ncontainer has not been created from an application.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "architecture": {
          "description": "Architecture describes the CPU archtitecture the container is using",
          "type": "string",
          "example": "aarch64"
        },
        "config": {
          "description": "Config summarizes the configuration the container uses",
          "type": "object",
          "properties": {
            "boot_activity": {
              "description": "BootActivity specifies the Android activity which is started by default",
              "type": "string",
              "example": "com.android.settings/.DevSettings"
            },
            "boot_package": {
              "description": "BootPackage specifies the Android application package name which is started by default",
              "type": "string",
              "example": "com.android.settings"
            },
            "devmode": {
              "description": "DevMode specifies if development mode has been turned on for the container",
              "type": "boolean"
            },
            "disable_watchdog": {
              "description": "DisableWatchdog defines whether the watchdog is disabled",
              "type": "boolean"
            },
            "metrics_server": {
              "description": "MetricsServer specifies a metrics server the container will use",
              "type": "string",
              "example": "10.0.0.45:8086"
            },
            "platform": {
              "description": "Platform specifies the Anbox platform the container is running with",
              "type": "string",
              "example": "webrtc"
            }
          }
        },
        "created_at": {
          "description": "CreatedAt specifies the time at which the container was created",
          "type": "integer",
          "format": "int64",
          "example": 1689604498
        },
        "error_message": {
          "description": "ErrorMessage provides an error message when the container status is set to error.",
          "type": "string",
          "example": "container failed to boot"
        },
        "id": {
          "description": "ID of the container",
          "type": "string",
          "example": "cilsreunfpfec9b1ktg0"
        },
        "image_id": {
          "description": "ImageID is the ID of the image the container is created from. Empty if the\ncontainer has not been created from an image.",
          "type": "string",
          "example": "cilshrmnfpfec9b1kte0"
        },
        "image_version": {
          "description": "ImageVersion is the version of the image the container is created from. Empty if the\ncontainer has not been created from an image.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "name": {
          "description": "Name of the container. Typically in the format \"ams-\u003cID\u003e\".",
          "type": "string",
          "example": "ams-cilsreunfpfec9b1ktg0"
        },
        "node": {
          "description": "Node the container is running on",
          "type": "string",
          "example": "lxd0"
        },
        "public_address": {
          "description": "PublicAddress is the external IP address the container is accessible on (in most\ncases the IP of the node it is running on)",
          "type": "string",
          "example": "1.2.3.4"
        },
        "resources": {
          "description": "Resources specifies the resources allocated for the container",
          "type": "object",
          "properties": {
            "cpus": {
              "description": "CPUs cores assigned to the container",
              "type": "integer",
              "format": "int64",
              "example": 2
            },
            "disk-size": {
              "description": "DiskSize specifies the amount of storage assigned to the container",
              "type": "string",
              "example": "3GB"
            },
            "gpu-slots": {
              "description": "GPUSlots specifies the number of GPU slots the container got allocated",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "memory": {
              "description": "Memory assigned to the container",
              "type": "string",
              "example": "3GB"
            },
            "vpu-slots": {
              "description": "VPUSlots specifies the number of VPU slots the container",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "services": {
          "description": "Services the container exposes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerService"
          }
        },
        "status": {
          "description": "Status of the container",
          "type": "string",
          "example": "running"
        },
        "status_code": {
          "$ref": "#/definitions/ContainerStatus"
        },
        "stored_logs": {
          "description": "StoredLogs lists log files AMS stores for the container.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "android.log",
            "system.log"
          ]
        },
        "tags": {
          "description": "Tags specifies the tags the container has assigned",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "foo",
            "bar"
          ]
        },
        "type": {
          "$ref": "#/definitions/ContainerType"
        }
      }
    },
    "ContainerDelete": {
      "description": "ContainerDelete describes a request used to delete a container",
      "type": "object",
      "properties": {
        "force": {
          "description": "Whether deletion of the container should be forced",
          "type": "boolean"
        }
      }
    },
    "ContainerExecControl": {
      "description": "ContainerExecControl represents a message on the container shell \"control\" socket",
      "type": "object",
      "properties": {
        "args": {
          "description": "Arguments to pass to the command",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "height": 720,
            "width": 1280
          }
        },
        "command": {
          "description": "Command to execute. Possible values are: window-resize, signal",
          "type": "string",
          "example": "window-resize"
        },
        "signal": {
          "description": "Signal to send",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ContainerExecPost": {
      "description": "ContainerExecPost represents an container execution request",
      "type": "object",
      "properties": {
        "command": {
          "description": "Command inside the container to execute",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "/bin/ls"
        },
        "environment": {
          "description": "Environment to setup when the command is executed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "FOO": "bar"
          }
        },
        "height": {
          "description": "Height of the terminal. Only required when `interactive` is set to `true`.",
          "type": "integer",
          "format": "int64"
        },
        "interactive": {
          "description": "Whether the command is executed interactively or not",
          "type": "boolean"
        },
        "width": {
          "description": "Width of the terminal. Only required when `interactive` is set to `true`.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ContainerPatch": {
      "description": "ContainerPatch describes the fields which can be changed for an existing container",
      "type": "object",
      "properties": {
        "desired_status": {
          "description": "Desired status of the container",
          "type": "string"
        }
      }
    },
    "ContainerService": {
      "description": "While NetworkServiceSpec defines what the user requests, ContainerService is what is actually\nopened on the container.",
      "type": "object",
      "title": "ContainerService describes a single service the container exposes to the outside world.",
      "properties": {
        "expose": {
          "description": "Expose defines wether the service is exposed on the public endpoint of the node\nor if it is only available on the private endpoint. To expose the service set to\ntrue and to false otherwise.",
          "type": "boolean"
        },
        "name": {
          "description": "Name gives the container a hint what the exposed port is being used for. This\nallows further tweaks inside the container to expose the service correctly.",
          "type": "string",
          "example": "myservice"
        },
        "node_port": {
          "description": "NodePort is the port used on the LXD node to map to the service port\nIf left empty the node port is automatically selected.",
          "type": "integer",
          "format": "int64",
          "example": 4000
        },
        "node_port_end": {
          "description": "NodePortEnd, if specified, denotes the end of the port range on the node starting\nat NodePort",
          "type": "integer",
          "format": "int64",
          "example": 4010
        },
        "port": {
          "description": "Port is the port the container provides a service on",
          "type": "integer",
          "format": "int64",
          "example": 3000
        },
        "port_end": {
          "description": "PortEnd, if specified, denotes the end of the port range starting at Port",
          "type": "integer",
          "format": "int64",
          "example": 3010
        },
        "protocols": {
          "description": "List of network protocols (tcp, udp) the port should be exposed for",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkProtocol"
          },
          "example": [
            "tcp",
            "udp"
          ]
        }
      }
    },
    "ContainerStatus": {
      "description": "ContainerStatus represents the status a container can be in",
      "type": "integer",
      "format": "int64"
    },
    "ContainerType": {
      "description": "Possible values are: regular, base, unknown",
      "type": "string",
      "title": "ContainerType describes the type of a container."
    },
    "ContainersDelete": {
      "description": "ContainersDelete represents a list of containers to delete together",
      "type": "object",
      "properties": {
        "force": {
          "description": "Whether deletion of the containers should be forced",
          "type": "boolean"
        },
        "ids": {
          "description": "IDs of the containers to delete",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "cilsreunfpfec9b1ktg0",
            "cilsreunfpfec9b1ktg1"
          ]
        }
      }
    },
    "ContainersPost": {
      "description": "ContainersPost represents the fields required to launch a new container for\na specific application",
      "type": "object",
      "properties": {
        "addons": {
          "description": "Addons to enable for the container",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "addon0",
            "addon1"
          ]
        },
        "app_id": {
          "description": "ID of the application to use. Can be empty if an image ID is specified instead",
          "type": "string",
          "example": "cilsiomnfpfec9b1kteg"
        },
        "app_version": {
          "description": "Version of the application to use. If not specified, the latest version is used.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "config": {
          "type": "object",
          "properties": {
            "boot_activity": {
              "description": "BootActivity specifies the Android activity which is started by default",
              "type": "string",
              "example": "com.android.settings/.DevSettings"
            },
            "boot_package": {
              "description": "BootPackage specifies the Android application package name which is started by default",
              "type": "string",
              "example": "com.android.settings"
            },
            "devmode": {
              "description": "DevMode specifies if development mode has been turned on for the container",
              "type": "boolean"
            },
            "disable_watchdog": {
              "description": "DisableWatchdog defines whether the watchdog is disabled",
              "type": "boolean"
            },
            "features": {
              "description": "Feature flags to enable for the container.",
              "type": "string",
              "example": "feature0, feature1"
            },
            "metrics_server": {
              "description": "MetricsServer specifies a metrics server the container will use",
              "type": "string",
              "example": "10.0.0.45:8086"
            },
            "platform": {
              "description": "Platform specifies the Anbox platform the container is running with",
              "type": "string",
              "example": "webrtc"
            }
          }
        },
        "cpus": {
          "description": "Number of CPU cores the container should get assigned.",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "disk_size": {
          "description": "Disk size the container should get allocated in bytes",
          "type": "integer",
          "format": "int64",
          "example": 3221225472
        },
        "gpu-slots": {
          "description": "Number of GPU slots the container should get assigned.",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "image_id": {
          "description": "ID of the image to use. Can be empty if an application ID is specified instead.",
          "type": "string",
          "example": "cilshrmnfpfec9b1kte0"
        },
        "image_version": {
          "description": "Version of the image to use. If not specified, the latest version is used.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "instance_type": {
          "description": "Instance type to use for the container.\nExample a2.3",
          "type": "string"
        },
        "memory": {
          "description": "Memory the container should get assigned in bytes.",
          "type": "integer",
          "format": "int64",
          "example": 3221225472
        },
        "no_start": {
          "description": "Do not start the container after creation.",
          "type": "boolean"
        },
        "node": {
          "description": "Node to start the container on. If empty node will be automatically selected.",
          "type": "string",
          "example": "lxd0"
        },
        "services": {
          "description": "Services to enable for the container",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkServiceSpec"
          }
        },
        "tags": {
          "description": "Tags which will be assigned to the container",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "tag0",
            "tag1"
          ]
        },
        "user_data": {
          "description": "User data to pass to the container.",
          "type": "string",
          "example": "{\\\"key\\\":\\\"value\\\"}"
        },
        "vpu-slots": {
          "description": "Number of VPU slots the container should get assigned",
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      }
    },
    "Event": {
      "description": "Event defines the structure of an event sent on the events API endpoint",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata represents the actual event data",
          "example": "{ \"class\": \"task\", \"created_at\": \"2017-07-28T05:02:22.92201407Z\", \"description\": \"Deleting container\", \"err\": \"\", \"id\": \"bc85137b-b20d-470a-a6ea-daa9a2b8506a\", \"may_cancel\": false, \"metadata\": null, \"resources\": { \"containers\": [ \"/1.0/containers/c0946voj1qm6t2783db0\" ] }, \"server_address\": \"\", \"status\": \"Success\", \"status_code\": 200, \"updated_at\": \"2017-07-28T05:02:22.92201407Z\" }"
        },
        "timestamp": {
          "description": "Timestamp (in ISO8601 format) is filled when sending the event if empty",
          "example": "2017-07-28T05:02:22.92201407Z"
        },
        "type": {
          "description": "Type defines the type of event. Listeners can watch specific\nevent types",
          "type": "string",
          "enum": [
            "operation",
            "lifecycle"
          ]
        }
      }
    },
    "Image": {
      "description": "Image represents an image available in AMS",
      "type": "object",
      "properties": {
        "architecture": {
          "description": "CPU architecture supported by the image",
          "type": "string",
          "example": "x86_64"
        },
        "default": {
          "description": "Flag to show whether the image is used by default if no image name is provided",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "ID of the image",
          "type": "string",
          "example": "btavtegj1qm58qg7ru50"
        },
        "immutable": {
          "description": "Flag to show whether the image can be edited by an AMS instance or not",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "Name of the image",
          "type": "string",
          "example": "my-image"
        },
        "status": {
          "description": "Current status of the image",
          "type": "string",
          "enum": [
            "error",
            "created",
            "active",
            "initializing",
            "unknown"
          ],
          "example": "active"
        },
        "status_code": {
          "$ref": "#/definitions/ImageStatus"
        },
        "type": {
          "$ref": "#/definitions/ImageType"
        },
        "used_by": {
          "description": "List of application ids using the image as a base",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "btavtegj1qm58asf123"
          ]
        },
        "versions": {
          "description": "List of versions for the image",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageVersion"
          }
        }
      }
    },
    "ImageDelete": {
      "description": "ImageDelete describes a request used to delete an image",
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean"
        }
      }
    },
    "ImagePatch": {
      "description": "ImagePatch represents the fields to update an existing image",
      "type": "object",
      "properties": {
        "default": {
          "description": "Make the image as default",
          "type": "boolean",
          "example": true
        },
        "force_sync": {
          "description": "ForceSync forces synchronization of the image from the remote image server\nExamle: true",
          "type": "boolean"
        }
      }
    },
    "ImageStatus": {
      "description": "ImageStatus represents the status of an image",
      "type": "integer",
      "format": "int64"
    },
    "ImageType": {
      "description": "ImageType specifies the type of an image",
      "type": "string"
    },
    "ImageVersion": {
      "description": "ImageVersion describes a single version of an image",
      "type": "object",
      "properties": {
        "created_at": {
          "description": "Creation UTC timestamp of the image",
          "type": "integer",
          "format": "int64",
          "example": 1610641117
        },
        "fingerprint": {
          "description": "Fingerprint of the image version",
          "type": "string",
          "example": "0791cfc011f67c60b7bd0f852ddb686b79fa46083d9d43ef9845c9235c67b261"
        },
        "remote_id": {
          "description": "Version of the image in the remote server",
          "type": "string",
          "example": "1.2.3"
        },
        "size": {
          "description": "Size (in bytes) of the image version",
          "type": "integer",
          "format": "int64",
          "example": 529887868
        },
        "status": {
          "description": "Current status of the image",
          "type": "string",
          "enum": [
            "error",
            "created",
            "active",
            "initializing",
            "unknown"
          ],
          "example": "active"
        },
        "status_code": {
          "$ref": "#/definitions/ImageStatus"
        },
        "version": {
          "description": "Version for the image",
          "type": "integer",
          "format": "int64",
          "example": 0
        }
      }
    },
    "ImagesGet": {
      "description": "ImagesGet represents a list of images",
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      }
    },
    "ImagesPost": {
      "description": "ImagesPost represents the fields to upload a new image",
      "type": "object",
      "properties": {
        "default": {
          "description": "Make the image as default",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "Name of the image",
          "type": "string",
          "example": "my-image"
        },
        "path": {
          "description": "Path to store the image",
          "type": "string",
          "example": "/save/image"
        },
        "type": {
          "$ref": "#/definitions/ImageType"
        }
      }
    },
    "Instance": {
      "description": "Instance represents a single instance",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is the IP address of the instance",
          "type": "string",
          "example": "192.168.1.74"
        },
        "app_id": {
          "description": "AppID is the ID of the application the instance is created from. Empty if the\ninstance has not been created from an application.",
          "type": "string",
          "example": "cilsiomnfpfec9b1kteg"
        },
        "app_name": {
          "description": "AppName is the name of the application the instance is created from. Empty if the\ninstance has not been created from an application.",
          "type": "string",
          "example": "myapp"
        },
        "app_version": {
          "description": "AppVersion is the version of the application the instance is created from. Empty if the\ninstance has not been created from an application.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "architecture": {
          "description": "Architecture describes the CPU archtitecture the instance is using",
          "type": "string",
          "example": "aarch64"
        },
        "base": {
          "description": "If this is a base instance or not",
          "type": "boolean"
        },
        "config": {
          "description": "Config summarizes the configuration the instance uses",
          "type": "object",
          "properties": {
            "boot_activity": {
              "description": "BootActivity specifies the Android activity which is started by default",
              "type": "string",
              "example": "com.android.settings/.DevSettings"
            },
            "boot_package": {
              "description": "BootPackage specifies the Android application package name which is started by default",
              "type": "string",
              "example": "com.android.settings"
            },
            "devmode": {
              "description": "DevMode specifies if development mode has been turned on for the instance",
              "type": "boolean"
            },
            "disable_watchdog": {
              "description": "DisableWatchdog defines whether the watchdog is disabled",
              "type": "boolean"
            },
            "display": {
              "type": "object",
              "properties": {
                "density": {
                  "description": "Density is the piel density of the virtual display",
                  "type": "integer",
                  "format": "int64"
                },
                "fps": {
                  "description": "FPS is the frame rate of the virtual display",
                  "type": "integer",
                  "format": "int64"
                },
                "height": {
                  "description": "Height is the height of the virtual display",
                  "type": "integer",
                  "format": "int64"
                },
                "width": {
                  "description": "Width is the width of the virtual display",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "enable_streaming": {
              "description": "EnableStreaming specifies if streaming should be enabled for the instance or not",
              "type": "boolean"
            },
            "metrics_server": {
              "description": "MetricsServer specifies a metrics server the instance will use",
              "type": "string",
              "example": "10.0.0.45:8086"
            },
            "platform": {
              "description": "Platform specifies the Anbox platform the instance is running with",
              "type": "string",
              "example": "webrtc"
            }
          }
        },
        "created_at": {
          "description": "CreatedAt specifies the time at which the instance was created",
          "type": "integer",
          "format": "int64",
          "example": 1689604498
        },
        "error_message": {
          "description": "ErrorMessage provides an error message when the instance status is set to error.",
          "type": "string",
          "example": "instance failed to boot"
        },
        "id": {
          "description": "ID of the instance",
          "type": "string",
          "example": "cilsreunfpfec9b1ktg0"
        },
        "image_id": {
          "description": "ImageID is the ID of the image the instance is created from. Empty if the\ninstance has not been created from an image.",
          "type": "string",
          "example": "cilshrmnfpfec9b1kte0"
        },
        "image_version": {
          "description": "ImageVersion is the version of the image the instance is created from. Empty if the\ninstance has not been created from an image.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "name": {
          "description": "Name of the instance. Typically in the format \"ams-\u003cID\u003e\".",
          "type": "string",
          "example": "ams-cilsreunfpfec9b1ktg0"
        },
        "node": {
          "description": "Node the instance is running on",
          "type": "string",
          "example": "lxd0"
        },
        "public_address": {
          "description": "PublicAddress is the external IP address the instance is accessible on (in most\ncases the IP of the node it is running on)",
          "type": "string",
          "example": "1.2.3.4"
        },
        "resources": {
          "$ref": "#/definitions/InstanceResources"
        },
        "services": {
          "description": "Services the instance exposes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceService"
          }
        },
        "status": {
          "description": "Status of the instance",
          "type": "string",
          "example": "running"
        },
        "status_code": {
          "$ref": "#/definitions/InstanceStatus"
        },
        "status_message": {
          "description": "StatusMessage describes the current status of the instance",
          "type": "string",
          "example": "\"Waiting for image download\""
        },
        "stored_logs": {
          "description": "StoredLogs lists log files AMS stores for the instance.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "android.log",
            "system.log"
          ]
        },
        "tags": {
          "description": "Tags specifies the tags the instance has assigned",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "foo",
            "bar"
          ]
        },
        "type": {
          "$ref": "#/definitions/InstanceType"
        }
      }
    },
    "InstanceDelete": {
      "description": "InstanceDelete describes a request used to delete a instance",
      "type": "object",
      "properties": {
        "force": {
          "description": "Whether deletion of the instance should be forced",
          "type": "boolean"
        }
      }
    },
    "InstanceExecControl": {
      "description": "InstanceExecControl represents a message on the instance shell \"control\" socket",
      "type": "object",
      "properties": {
        "args": {
          "description": "Arguments to pass to the command",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "height": 720,
            "width": 1280
          }
        },
        "command": {
          "description": "Command to execute. Possible values are: window-resize, signal",
          "type": "string",
          "example": "window-resize"
        },
        "signal": {
          "description": "Signal to send",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "InstanceExecPost": {
      "description": "InstanceExecPost represents an instance execution request",
      "type": "object",
      "properties": {
        "command": {
          "description": "Command inside the instance to execute",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "/bin/ls"
        },
        "environment": {
          "description": "Environment to setup when the command is executed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "FOO": "bar"
          }
        },
        "height": {
          "description": "Height of the terminal. Only required when `interactive` is set to `true`.",
          "type": "integer",
          "format": "int64"
        },
        "interactive": {
          "description": "Whether the command is executed interactively or not",
          "type": "boolean"
        },
        "width": {
          "description": "Width of the terminal. Only required when `interactive` is set to `true`.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "InstancePatch": {
      "description": "InstancePatch describes the fields which can be changed for an existing instance",
      "type": "object",
      "properties": {
        "desired_status": {
          "description": "Desired status of the instance",
          "type": "string"
        }
      }
    },
    "InstanceResources": {
      "description": "InstanceResources represents resources assigned to an instance",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "CPUs cores assigned to the instance",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "disk-size": {
          "description": "DiskSize specifies the amount of storage assigned to the instance in bytes",
          "type": "integer",
          "format": "int64",
          "example": 3221225472
        },
        "gpu-slots": {
          "description": "GPUSlots specifies the number of GPU slots the instance got allocated",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "memory": {
          "description": "Memory assigned to the instance in bytes",
          "type": "integer",
          "format": "int64",
          "example": 3221225472
        },
        "vpu-slots": {
          "description": "VPUSlots specifies the number of VPU slots the instance",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "InstanceService": {
      "description": "While NetworkServiceSpec defines what the user requests, InstanceService is what is actually\nopened on the instance.",
      "type": "object",
      "title": "InstanceService describes a single service the instance exposes to the outside world.",
      "properties": {
        "expose": {
          "description": "Expose defines wether the service is exposed on the public endpoint of the node\nor if it is only available on the private endpoint. To expose the service set to\ntrue and to false otherwise.",
          "type": "boolean"
        },
        "name": {
          "description": "Name gives the instance a hint what the exposed port is being used for. This\nallows further tweaks inside the instance to expose the service correctly.",
          "type": "string",
          "example": "myservice"
        },
        "node_port": {
          "description": "NodePort is the port used on the LXD node to map to the service port\nIf left empty the node port is automatically selected.",
          "type": "integer",
          "format": "int64",
          "example": 4000
        },
        "node_port_end": {
          "description": "NodePortEnd, if specified, denotes the end of the port range on the node starting\nat NodePort",
          "type": "integer",
          "format": "int64",
          "example": 4010
        },
        "port": {
          "description": "Port is the port the instance provides a service on",
          "type": "integer",
          "format": "int64",
          "example": 3000
        },
        "port_end": {
          "description": "PortEnd, if specified, denotes the end of the port range starting at Port",
          "type": "integer",
          "format": "int64",
          "example": 3010
        },
        "protocols": {
          "description": "List of network protocols (tcp, udp) the port should be exposed for",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkProtocol"
          },
          "example": [
            "tcp",
            "udp"
          ]
        }
      }
    },
    "InstanceStatus": {
      "description": "InstanceStatus represents the status a instance can be in",
      "type": "integer",
      "format": "int64"
    },
    "InstanceType": {
      "description": "InstanceType describes the type of an instance (container, vm)",
      "type": "string"
    },
    "InstancesDelete": {
      "description": "InstancesDelete represents a list of instances to delete together",
      "type": "object",
      "properties": {
        "force": {
          "description": "Whether deletion of the instances should be forced",
          "type": "boolean"
        },
        "ids": {
          "description": "IDs of the instances to delete",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "cilsreunfpfec9b1ktg0",
            "cilsreunfpfec9b1ktg1"
          ]
        }
      }
    },
    "InstancesPost": {
      "description": "InstancesPost represents the fields required to launch a new instance for\na specific application",
      "type": "object",
      "properties": {
        "addons": {
          "description": "Addons to enable for the instance",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "addon0",
            "addon1"
          ]
        },
        "app_id": {
          "description": "ID of the application to use. Can be empty if an image ID is specified instead",
          "type": "string",
          "example": "cilsiomnfpfec9b1kteg"
        },
        "app_version": {
          "description": "Version of the application to use. If not specified, the latest version is used.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "config": {
          "type": "object",
          "properties": {
            "boot_activity": {
              "description": "BootActivity specifies the Android activity which is started by default",
              "type": "string",
              "example": "com.android.settings/.DevSettings"
            },
            "boot_package": {
              "description": "BootPackage specifies the Android application package name which is started by default",
              "type": "string",
              "example": "com.android.settings"
            },
            "devmode": {
              "description": "DevMode specifies if development mode has been turned on for the instance",
              "type": "boolean"
            },
            "disable_watchdog": {
              "description": "DisableWatchdog defines whether the watchdog is disabled",
              "type": "boolean"
            },
            "display": {
              "description": "Display specifies the configuration of the virutal display of the instance",
              "type": "object",
              "properties": {
                "density": {
                  "description": "Density is the piel density of the virtual display",
                  "type": "integer",
                  "format": "int64"
                },
                "fps": {
                  "description": "FPS is the frame rate of the virtual display",
                  "type": "integer",
                  "format": "int64"
                },
                "height": {
                  "description": "Height is the height of the virtual display",
                  "type": "integer",
                  "format": "int64"
                },
                "width": {
                  "description": "Width is the width of the virtual display",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "enable_streaming": {
              "description": "EnableStreaming specifies if streaming should be enabled for the instance or not",
              "type": "boolean"
            },
            "features": {
              "description": "Feature flags to enable for the instance.",
              "type": "string",
              "example": "feature0, feature1"
            },
            "metrics_server": {
              "description": "MetricsServer specifies a metrics server the instance will use",
              "type": "string",
              "example": "10.0.0.45:8086"
            },
            "platform": {
              "description": "Platform specifies the Anbox platform the instance is running with",
              "type": "string",
              "example": "webrtc"
            }
          }
        },
        "image_id": {
          "description": "ID of the image to use. Can be empty if an application ID is specified instead.",
          "type": "string",
          "example": "cilshrmnfpfec9b1kte0"
        },
        "image_version": {
          "description": "Version of the image to use. If not specified, the latest version is used.",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "name": {
          "description": "Name of the instance. Will be automatically assigned if not specified. Names\nmust be unique.",
          "type": "string"
        },
        "no_start": {
          "description": "Do not start the instance after creation.",
          "type": "boolean"
        },
        "node": {
          "description": "Node to start the instance on. If empty node will be automatically selected.",
          "type": "string",
          "example": "lxd0"
        },
        "resources": {
          "description": "Resources specifies the resources allocated for the instance",
          "type": "object",
          "properties": {
            "cpus": {
              "description": "Number of CPU cores the instance should get assigned.",
              "type": "integer",
              "format": "int64",
              "example": 4
            },
            "disk_size": {
              "description": "Disk size the instance should get allocated in bytes",
              "type": "integer",
              "format": "int64",
              "example": 3221225472
            },
            "gpu-slots": {
              "description": "Number of GPU slots the instance should get assigned.",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "memory": {
              "description": "Memory the instance should get assigned in bytes.",
              "type": "integer",
              "format": "int64",
              "example": 3221225472
            },
            "vpu-slots": {
              "description": "Number of VPU slots the instance should get assigned",
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        },
        "services": {
          "description": "Services to enable for the instance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkServiceSpec"
          }
        },
        "tags": {
          "description": "Tags which will be assigned to the instance",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "tag0",
            "tag1"
          ]
        },
        "type": {
          "$ref": "#/definitions/InstanceType"
        },
        "user_data": {
          "description": "User data to pass to the instance.",
          "type": "string",
          "example": "{\\\"key\\\":\\\"value\\\"}"
        }
      }
    },
    "NetworkProtocol": {
      "description": "NetworkProtocol describes a specific network protocol like TCP or UDP a ContainerService can use",
      "type": "string"
    },
    "NetworkServiceSpec": {
      "description": "NetworkServiceSpec is used to define the user defined network services that should be opened on a container",
      "type": "object",
      "properties": {
        "expose": {
          "description": "Expose defines wether the service is exposed on the public endpoint of the node\nor if it is only available on the private endpoint. To expose the service set to\ntrue and to false otherwise.",
          "type": "boolean"
        },
        "name": {
          "description": "Name gives the container a hint what the exposed port is being used for. This\nallows further tweaks inside the container to expose the service correctly.\nExampe: ssh",
          "type": "string"
        },
        "port": {
          "description": "Port is the port the container provides a service on",
          "type": "integer",
          "format": "int64",
          "example": 3000
        },
        "port_end": {
          "description": "PortEnd is the end of the port range set for a service. If empty, only a\nsingle port is opened",
          "type": "integer",
          "format": "int64",
          "example": 3010
        },
        "protocols": {
          "description": "List of network protocols (tcp, udp) the port should be exposed for",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkProtocol"
          },
          "example": [
            "tcp",
            "udp"
          ]
        }
      }
    },
    "NoMetaSyncResponse": {
      "description": "Swagger Synchronous response without metadata field",
      "type": "object",
      "properties": {
        "error_code": {
          "description": "Error code for the operation",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "status": {
          "description": "Status of requested operation",
          "type": "string",
          "example": "Success"
        },
        "status_code": {
          "description": "Status code of the request",
          "type": "integer",
          "format": "int64",
          "example": 200
        },
        "type": {
          "description": "Type of operation response",
          "type": "string",
          "example": "sync"
        }
      }
    },
    "Node": {
      "description": "Node describes a single node of the underlying LXD cluster AMS manages",
      "type": "object",
      "properties": {
        "address": {
          "description": "Internal IP address of the node",
          "type": "string",
          "format": "ipv4",
          "example": "10.0.0.1"
        },
        "architecture": {
          "description": "CPU architecture of the node",
          "type": "string",
          "example": "aarch64"
        },
        "cpu_allocation_rate": {
          "description": "CPU allocation rate for the node",
          "type": "number",
          "format": "float",
          "example": 4
        },
        "cpus": {
          "description": "Number of CPUs on the node",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "disk_size": {
          "description": "Disk size for the node",
          "type": "string",
          "example": "true"
        },
        "gpu_encoder_slots": {
          "description": "Number of GPU encoder slots present on the node",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "gpu_slots": {
          "description": "Number of GPU slots present on the node",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "gpus": {
          "description": "GPU information for the node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeGPU"
          }
        },
        "is_master": {
          "description": "Flag to represent the master node for the AMS cluster",
          "type": "boolean",
          "example": true
        },
        "managed": {
          "description": "Flag used to control if AMS can manage the LXD node",
          "type": "boolean",
          "example": false
        },
        "memory": {
          "description": "Memory (in GB) of the LXD node",
          "type": "string",
          "example": "8GB"
        },
        "memory_allocation_rate": {
          "description": "Memory allocation rate for the node",
          "type": "number",
          "format": "float",
          "example": 2
        },
        "name": {
          "description": "Name of the node",
          "type": "string",
          "example": "lxd0"
        },
        "network_bridge_mtu": {
          "description": "MTU for the configured network bridge on LXD",
          "type": "integer",
          "format": "int64",
          "example": 1500
        },
        "public_address": {
          "description": "Public IP address of the node",
          "type": "string",
          "format": "ipv4",
          "example": "10.0.0.1"
        },
        "status": {
          "description": "Current status of the node",
          "type": "string",
          "example": "online"
        },
        "status_code": {
          "$ref": "#/definitions/NodeStatus"
        },
        "storage_pool": {
          "description": "Name of the storage pool configured for the node",
          "type": "string",
          "example": "default"
        },
        "tags": {
          "description": "Tags attached to the node",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "created_by=anbox",
            "gpu=nvidia"
          ]
        },
        "unscheduable": {
          "description": "DEPRECATED Flag in favour of `unschedulable` flag",
          "type": "boolean",
          "example": false
        },
        "unschedulable": {
          "description": "Flag used to see if the node is available to schedule containers",
          "type": "boolean",
          "example": false
        },
        "vpus": {
          "description": "VPU information for the node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeVPU"
          }
        }
      }
    },
    "NodeDelete": {
      "description": "NodeDelete describes a request used to delete a node",
      "type": "object",
      "properties": {
        "force": {
          "description": "Use this to force deletion of a node from AMS and LXD cluster",
          "type": "boolean",
          "example": true
        },
        "keep_in_cluster": {
          "description": "Use this to remove the node from the LXD cluster as well",
          "type": "boolean",
          "example": true
        }
      }
    },
    "NodeGPU": {
      "description": "NodeGPU describes a single GPU available on a node",
      "type": "object",
      "properties": {
        "allocations": {
          "description": "Map of current allocations and containers on the GPU",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/NodeGPUAllocation"
          }
        },
        "encoder_slots": {
          "description": "Number of the encoder slots available on the GPU",
          "type": "integer",
          "format": "int64",
          "example": 20
        },
        "id": {
          "description": "ID of the GPU configured on the node",
          "type": "integer",
          "format": "uint64",
          "example": 0
        },
        "numa_node": {
          "description": "NUMA Node number for the GPU",
          "type": "integer",
          "format": "uint64",
          "example": 0
        },
        "pci_address": {
          "description": "PCI Bus Address used by the GPU",
          "type": "string",
          "example": "00:08.0"
        },
        "render_name": {
          "description": "PCI Bus Address used by the GPU",
          "type": "string",
          "example": "D129"
        },
        "slots": {
          "description": "Number of the GPU slots available",
          "type": "integer",
          "format": "int64",
          "example": 20
        }
      }
    },
    "NodeGPUAllocation": {
      "description": "NodeGPUAllocation describes a single allocation on a GPU",
      "type": "object",
      "properties": {
        "encoder_slots": {
          "description": "Number of Encoder Slots allocated to the container",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "gpus": {
          "description": "List of GPU IDs allocated to the container",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "example": [
            0,
            1
          ]
        },
        "slots": {
          "description": "Number of GPU Slots allocated to the container",
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      }
    },
    "NodeGPUPatch": {
      "description": "NodeGPUPatch allows changing configuration for individual GPUs",
      "type": "object",
      "properties": {
        "encoder_slots": {
          "description": "Update the number of GPU encoder slots",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "id": {
          "description": "ID of the GPU configured on the node",
          "type": "integer",
          "format": "uint64",
          "example": 0
        },
        "slots": {
          "description": "Update the number of the GPU slots available on the Node",
          "type": "integer",
          "format": "int64",
          "example": 20
        }
      }
    },
    "NodePatch": {
      "description": "NodePatch describes a request to update an existing node",
      "type": "object",
      "properties": {
        "cpu_allocation_rate": {
          "description": "Update the CPU allocation rate for the node",
          "type": "number",
          "format": "float",
          "example": 4
        },
        "cpus": {
          "description": "Update the number of CPUs for the node",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "gpu_encoder_slots": {
          "description": "Update the number of GPU encoder slots to configure on the node",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "gpu_slots": {
          "description": "Update the number of GPU slots to configure on the node",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "gpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeGPUPatch"
          }
        },
        "memory": {
          "description": "Update the memory (in GB) for the node",
          "type": "string",
          "example": "2GB"
        },
        "memory_allocation_rate": {
          "description": "Update the memory allocation rate for the node",
          "type": "number",
          "format": "float",
          "example": 2
        },
        "public_address": {
          "description": "Update the public IP Address of the node",
          "type": "string",
          "format": "ipv4",
          "example": "10.0.0.1"
        },
        "subnet": {
          "description": "Update the subnet info of the node if the subnet of a node is changed",
          "type": "string",
          "format": "ipv4",
          "example": "10.0.0.1/24"
        },
        "tags": {
          "description": "Update the tags of the node",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "created_by=anbox",
            "gpu=nvidia"
          ]
        },
        "unscheduable": {
          "description": "DEPRECATED Flag in favour of `unschedulable` flag",
          "type": "boolean",
          "example": false
        },
        "unschedulable": {
          "description": "Flag used to remove the node from scheduler and not schedule containers on it",
          "type": "boolean",
          "example": true
        }
      }
    },
    "NodeStatus": {
      "description": "NodeStatus describes the current status of a node",
      "type": "integer",
      "format": "int64"
    },
    "NodeVPU": {
      "description": "NodeVPU describes a single independent VPU available on a node",
      "type": "object",
      "properties": {
        "allocations": {
          "description": "Map of current allocations on the VPU",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/NodeVPUAllocation"
          }
        },
        "id": {
          "description": "ID of the VPU",
          "type": "integer",
          "format": "uint64"
        },
        "model": {
          "description": "Model name of the VPU",
          "type": "string"
        },
        "numa_node": {
          "description": "NUMA node the card sits on",
          "type": "integer",
          "format": "uint64"
        },
        "slots": {
          "description": "Number of slots available on the VPU",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "Type of the VPU. Valid values are: unknown, netint",
          "type": "string"
        }
      }
    },
    "NodeVPUAllocation": {
      "description": "NodeVPUAllocation describes a single allocation for a VPU",
      "type": "object",
      "properties": {
        "ids": {
          "description": "VPU IDs the allocation is for",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          }
        },
        "slots": {
          "description": "Number of slots used by this allocation",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "NodesPost": {
      "description": "NodesPost describes a request to create a new node on AMS",
      "type": "object",
      "properties": {
        "address": {
          "description": "Internal IP address of the node",
          "type": "string",
          "format": "ipv4",
          "example": "10.0.0.1"
        },
        "cpu_allocation_rate": {
          "description": "CPU allocation rate for the node",
          "type": "number",
          "format": "float",
          "example": 4
        },
        "cpus": {
          "description": "Number of CPUs on the node",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "gpu_encoder_slots": {
          "description": "Number of GPU encoder slots to configure on the node",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "gpu_slots": {
          "description": "Number of GPU slots to configure on the node",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "memory": {
          "description": "Memory (in GB) of the node",
          "type": "string",
          "example": "8GB"
        },
        "memory_allocation_rate": {
          "description": "Memory allocation rate for the node",
          "type": "number",
          "format": "float",
          "example": 2
        },
        "name": {
          "description": "Name of the node",
          "type": "string",
          "example": "lxd0"
        },
        "network_acl_name": {
          "description": "Name of the network ACL to create on the LXD node",
          "type": "string",
          "example": "ams0"
        },
        "network_bridge_mtu": {
          "description": "MTU for the configured network bridge on LXD",
          "type": "integer",
          "format": "int64",
          "example": 1500
        },
        "network_name": {
          "description": "Name of the network bridge to create on the LXD node",
          "type": "string",
          "example": "amsbr0"
        },
        "network_subnet": {
          "description": "CIDR of the subnet to configure for the network bridge on LXD",
          "type": "string",
          "format": "ipv4",
          "example": "10.0.0.0/24"
        },
        "public_address": {
          "description": "Public IP address of the node",
          "type": "string",
          "format": "ipv4",
          "example": "10.0.0.1"
        },
        "storage_device": {
          "description": "Storage device to use for configuring LXD storage pools",
          "type": "string",
          "example": "/dev/sdb"
        },
        "storage_pool": {
          "description": "Name of the storage pool to use for configuring the LXD node",
          "type": "string",
          "example": "default"
        },
        "tags": {
          "description": "Tags to attach to the node",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "created_by=anbox",
            "gpu=nvidia"
          ]
        },
        "trust_password": {
          "description": "Trust password for the LXD instance",
          "type": "string",
          "example": "sUp3rs3cr3t"
        },
        "unmanaged": {
          "description": "Flag used to control if AMS can manage the LXD node",
          "type": "boolean",
          "example": false
        }
      }
    },
    "Operation": {
      "description": "Operation represents a background operation",
      "type": "object",
      "properties": {
        "class": {
          "description": "Class of the operation",
          "type": "string",
          "enum": [
            "task",
            "websocket",
            "token"
          ],
          "example": "task"
        },
        "created_at": {
          "description": "When the operation was created",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Human readable description of the operation",
          "type": "string",
          "example": "updating addon 3apqo5te"
        },
        "err": {
          "description": "The error string if the operation failed",
          "type": "string"
        },
        "id": {
          "description": "UUID of the operation",
          "type": "string",
          "example": "c6832c58-0867-467e-b245-2962d6527876"
        },
        "may_cancel": {
          "description": "Whether this operation can be canceled (DELETE over REST)",
          "type": "boolean",
          "example": false
        },
        "metadata": {
          "description": "Metadata related to the operation and affected resources",
          "type": "object",
          "additionalProperties": {},
          "example": {}
        },
        "resources": {
          "description": "Dictionnary of resource types (containers, snapshots, images)\nand affected resources",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "example": {
            "applications": [
              "/1.0/applications/my-app"
            ]
          }
        },
        "server_address": {
          "description": "The address of the server where the operation ran",
          "type": "string",
          "format": "ipv4"
        },
        "status": {
          "description": "String version of the operation status",
          "type": "string",
          "example": "Running"
        },
        "status_code": {
          "$ref": "#/definitions/StatusCode"
        },
        "updated_at": {
          "description": "When the operation was updated",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "OperationResponse": {
      "description": "Operation",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Operation"
        },
        "operation": {
          "type": "string",
          "example": "/1.0/operations/66e83638-9dd7-4a26-aef2-5462814869a1"
        },
        "status": {
          "type": "string",
          "example": "Operation created"
        },
        "status_code": {
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "type": {
          "type": "string",
          "example": "async"
        }
      }
    },
    "ServiceStatus": {
      "description": "ServiceStatus represents the status of the AMS service",
      "type": "object",
      "properties": {
        "api_extensions": {
          "description": "List of supported features for the service version running",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "addon_restore_hook",
            "container_logs",
            "registry"
          ]
        },
        "api_status": {
          "description": "Shows the API stability status",
          "type": "string",
          "example": "stable"
        },
        "api_version": {
          "description": "API version for the service",
          "type": "string",
          "example": "1.0"
        },
        "auth": {
          "description": "Used to see if the client is trusted. Can be `trusted` or `untrusted`.",
          "type": "string",
          "example": "untrusted"
        },
        "auth_methods": {
          "description": "Authentication method used for the requests.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "2waySSL"
        },
        "cluster_id": {
          "description": "ID of the subcluster the AMS instance is part of",
          "type": "string",
          "example": "cilsreunfpfec9b1ktg0"
        },
        "cluster_name": {
          "description": "Name of the subcluster the AMS instance is part of",
          "type": "string",
          "example": "prod0"
        }
      }
    },
    "StatusCode": {
      "description": "StatusCode represents a valid REST operation",
      "type": "integer",
      "format": "int64"
    },
    "Task": {
      "description": "Task is the scheduling unit AMS uses for container launches",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the task",
          "type": "string",
          "example": "c055dl0j1qm027422feg"
        },
        "object_id": {
          "description": "ID of the object that the task is operating on",
          "type": "string",
          "example": "c055dl0j1qm027422fe0"
        },
        "object_type": {
          "description": "Type of the object that the task is operating on",
          "type": "string",
          "example": "container"
        },
        "status": {
          "description": "Status of the task",
          "type": "string",
          "enum": [
            "created",
            "prepared",
            "started",
            "running",
            "stopped",
            "shutdown",
            "completed",
            "error",
            "deleted",
            "unknown"
          ],
          "example": "running"
        }
      }
    },
    "VersionGet": {
      "description": "VersionGet is the JSON response from the API version request method",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "VersionResponse": {
      "description": "VersionResponse shows the version for the running service",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of the service",
          "type": "string",
          "example": "1.18.2"
        }
      }
    },
    "VideoEncoderType": {
      "description": "VideoEncoderType describes the type of a video encoder is used by an application",
      "type": "string"
    }
  },
  "responses": {
    "EmptySyncResponse": {
      "description": "Empty sync response",
      "schema": {
        "type": "object",
        "properties": {
          "metadata": {
            "example": "{}"
          },
          "status": {
            "type": "string",
            "example": "Success"
          },
          "status_code": {
            "type": "integer",
            "format": "int64",
            "example": 200
          },
          "type": {
            "type": "string",
            "example": "sync"
          }
        }
      }
    },
    "ErrorAlreadyExists": {
      "description": "Already Exists",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "already exists"
          },
          "error_code": {
            "type": "integer",
            "format": "int64",
            "example": 409
          },
          "type": {
            "type": "string",
            "example": "error"
          }
        }
      }
    },
    "ErrorBadRequest": {
      "description": "Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "bad request"
          },
          "error_code": {
            "type": "integer",
            "format": "int64",
            "example": 400
          },
          "metadata": {
            "example": "{}"
          },
          "type": {
            "type": "string",
            "example": "error"
          }
        }
      }
    },
    "ErrorForbidden": {
      "description": "Forbidden",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Not Authorized"
          },
          "error_code": {
            "type": "integer",
            "format": "int64",
            "example": 403
          },
          "type": {
            "type": "string",
            "example": "error"
          }
        }
      }
    },
    "ErrorNotFound": {
      "description": "Not found",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "not found"
          },
          "error_code": {
            "type": "integer",
            "format": "int64",
            "example": 404
          },
          "type": {
            "type": "string",
            "example": "error"
          }
        }
      }
    },
    "ErrorServiceUnavailable": {
      "description": "Service Unavailable",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "service unavailable"
          },
          "error_code": {
            "type": "integer",
            "format": "int64",
            "example": 503
          },
          "type": {
            "type": "string",
            "example": "error"
          }
        }
      }
    },
    "ErrorUnauthorized": {
      "description": "Unauthorized",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "missing secret"
          },
          "error_code": {
            "type": "integer",
            "format": "int64",
            "example": 401
          },
          "type": {
            "type": "string",
            "example": "error"
          }
        }
      }
    },
    "InternalServerError": {
      "description": "Internal Server Error",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "internal server error"
          },
          "error_code": {
            "type": "integer",
            "format": "int64",
            "example": 500
          },
          "metadata": {
            "example": "{}"
          },
          "type": {
            "type": "string",
            "example": "error"
          }
        }
      }
    }
  }
}